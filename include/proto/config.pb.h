// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: config.proto

#ifndef PROTOBUF_config_2eproto__INCLUDED
#define PROTOBUF_config_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace sober {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_config_2eproto();
void protobuf_AssignDesc_config_2eproto();
void protobuf_ShutdownFile_config_2eproto();

class Config;

// ===================================================================

class Config : public ::google::protobuf::Message {
 public:
  Config();
  virtual ~Config();

  Config(const Config& from);

  inline Config& operator=(const Config& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Config& default_instance();

  void Swap(Config* other);

  // implements Message ----------------------------------------------

  Config* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Config& from);
  void MergeFrom(const Config& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string data_path = 1;
  inline bool has_data_path() const;
  inline void clear_data_path();
  static const int kDataPathFieldNumber = 1;
  inline const ::std::string& data_path() const;
  inline void set_data_path(const ::std::string& value);
  inline void set_data_path(const char* value);
  inline void set_data_path(const char* value, size_t size);
  inline ::std::string* mutable_data_path();
  inline ::std::string* release_data_path();
  inline void set_allocated_data_path(::std::string* data_path);

  // required int32 num_records = 2;
  inline bool has_num_records() const;
  inline void clear_num_records();
  static const int kNumRecordsFieldNumber = 2;
  inline ::google::protobuf::int32 num_records() const;
  inline void set_num_records(::google::protobuf::int32 value);

  // required int32 record_size = 3;
  inline bool has_record_size() const;
  inline void clear_record_size();
  static const int kRecordSizeFieldNumber = 3;
  inline ::google::protobuf::int32 record_size() const;
  inline void set_record_size(::google::protobuf::int32 value);

  // required int32 mixnet_rounds = 4;
  inline bool has_mixnet_rounds() const;
  inline void clear_mixnet_rounds();
  static const int kMixnetRoundsFieldNumber = 4;
  inline ::google::protobuf::int32 mixnet_rounds() const;
  inline void set_mixnet_rounds(::google::protobuf::int32 value);

  // required int32 num_records_per_block = 5;
  inline bool has_num_records_per_block() const;
  inline void clear_num_records_per_block();
  static const int kNumRecordsPerBlockFieldNumber = 5;
  inline ::google::protobuf::int32 num_records_per_block() const;
  inline void set_num_records_per_block(::google::protobuf::int32 value);

  // required string key_path = 6;
  inline bool has_key_path() const;
  inline void clear_key_path();
  static const int kKeyPathFieldNumber = 6;
  inline const ::std::string& key_path() const;
  inline void set_key_path(const ::std::string& value);
  inline void set_key_path(const char* value);
  inline void set_key_path(const char* value, size_t size);
  inline ::std::string* mutable_key_path();
  inline ::std::string* release_key_path();
  inline void set_allocated_key_path(::std::string* key_path);

  // required string tmp_data_path = 7;
  inline bool has_tmp_data_path() const;
  inline void clear_tmp_data_path();
  static const int kTmpDataPathFieldNumber = 7;
  inline const ::std::string& tmp_data_path() const;
  inline void set_tmp_data_path(const ::std::string& value);
  inline void set_tmp_data_path(const char* value);
  inline void set_tmp_data_path(const char* value, size_t size);
  inline ::std::string* mutable_tmp_data_path();
  inline ::std::string* release_tmp_data_path();
  inline void set_allocated_tmp_data_path(::std::string* tmp_data_path);

  // required int32 nthreads = 8;
  inline bool has_nthreads() const;
  inline void clear_nthreads();
  static const int kNthreadsFieldNumber = 8;
  inline ::google::protobuf::int32 nthreads() const;
  inline void set_nthreads(::google::protobuf::int32 value);

  // required int32 merge_factor = 9;
  inline bool has_merge_factor() const;
  inline void clear_merge_factor();
  static const int kMergeFactorFieldNumber = 9;
  inline ::google::protobuf::int32 merge_factor() const;
  inline void set_merge_factor(::google::protobuf::int32 value);

  // required int32 key_size = 10;
  inline bool has_key_size() const;
  inline void clear_key_size();
  static const int kKeySizeFieldNumber = 10;
  inline ::google::protobuf::int32 key_size() const;
  inline void set_key_size(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:sober.Config)
 private:
  inline void set_has_data_path();
  inline void clear_has_data_path();
  inline void set_has_num_records();
  inline void clear_has_num_records();
  inline void set_has_record_size();
  inline void clear_has_record_size();
  inline void set_has_mixnet_rounds();
  inline void clear_has_mixnet_rounds();
  inline void set_has_num_records_per_block();
  inline void clear_has_num_records_per_block();
  inline void set_has_key_path();
  inline void clear_has_key_path();
  inline void set_has_tmp_data_path();
  inline void clear_has_tmp_data_path();
  inline void set_has_nthreads();
  inline void clear_has_nthreads();
  inline void set_has_merge_factor();
  inline void clear_has_merge_factor();
  inline void set_has_key_size();
  inline void clear_has_key_size();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* data_path_;
  ::google::protobuf::int32 num_records_;
  ::google::protobuf::int32 record_size_;
  ::google::protobuf::int32 mixnet_rounds_;
  ::google::protobuf::int32 num_records_per_block_;
  ::std::string* key_path_;
  ::std::string* tmp_data_path_;
  ::google::protobuf::int32 nthreads_;
  ::google::protobuf::int32 merge_factor_;
  ::google::protobuf::int32 key_size_;
  friend void  protobuf_AddDesc_config_2eproto();
  friend void protobuf_AssignDesc_config_2eproto();
  friend void protobuf_ShutdownFile_config_2eproto();

  void InitAsDefaultInstance();
  static Config* default_instance_;
};
// ===================================================================


// ===================================================================

// Config

// required string data_path = 1;
inline bool Config::has_data_path() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Config::set_has_data_path() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Config::clear_has_data_path() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Config::clear_data_path() {
  if (data_path_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_path_->clear();
  }
  clear_has_data_path();
}
inline const ::std::string& Config::data_path() const {
  // @@protoc_insertion_point(field_get:sober.Config.data_path)
  return *data_path_;
}
inline void Config::set_data_path(const ::std::string& value) {
  set_has_data_path();
  if (data_path_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_path_ = new ::std::string;
  }
  data_path_->assign(value);
  // @@protoc_insertion_point(field_set:sober.Config.data_path)
}
inline void Config::set_data_path(const char* value) {
  set_has_data_path();
  if (data_path_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_path_ = new ::std::string;
  }
  data_path_->assign(value);
  // @@protoc_insertion_point(field_set_char:sober.Config.data_path)
}
inline void Config::set_data_path(const char* value, size_t size) {
  set_has_data_path();
  if (data_path_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_path_ = new ::std::string;
  }
  data_path_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:sober.Config.data_path)
}
inline ::std::string* Config::mutable_data_path() {
  set_has_data_path();
  if (data_path_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_path_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:sober.Config.data_path)
  return data_path_;
}
inline ::std::string* Config::release_data_path() {
  clear_has_data_path();
  if (data_path_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = data_path_;
    data_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Config::set_allocated_data_path(::std::string* data_path) {
  if (data_path_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_path_;
  }
  if (data_path) {
    set_has_data_path();
    data_path_ = data_path;
  } else {
    clear_has_data_path();
    data_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:sober.Config.data_path)
}

// required int32 num_records = 2;
inline bool Config::has_num_records() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Config::set_has_num_records() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Config::clear_has_num_records() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Config::clear_num_records() {
  num_records_ = 0;
  clear_has_num_records();
}
inline ::google::protobuf::int32 Config::num_records() const {
  // @@protoc_insertion_point(field_get:sober.Config.num_records)
  return num_records_;
}
inline void Config::set_num_records(::google::protobuf::int32 value) {
  set_has_num_records();
  num_records_ = value;
  // @@protoc_insertion_point(field_set:sober.Config.num_records)
}

// required int32 record_size = 3;
inline bool Config::has_record_size() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Config::set_has_record_size() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Config::clear_has_record_size() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Config::clear_record_size() {
  record_size_ = 0;
  clear_has_record_size();
}
inline ::google::protobuf::int32 Config::record_size() const {
  // @@protoc_insertion_point(field_get:sober.Config.record_size)
  return record_size_;
}
inline void Config::set_record_size(::google::protobuf::int32 value) {
  set_has_record_size();
  record_size_ = value;
  // @@protoc_insertion_point(field_set:sober.Config.record_size)
}

// required int32 mixnet_rounds = 4;
inline bool Config::has_mixnet_rounds() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Config::set_has_mixnet_rounds() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Config::clear_has_mixnet_rounds() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Config::clear_mixnet_rounds() {
  mixnet_rounds_ = 0;
  clear_has_mixnet_rounds();
}
inline ::google::protobuf::int32 Config::mixnet_rounds() const {
  // @@protoc_insertion_point(field_get:sober.Config.mixnet_rounds)
  return mixnet_rounds_;
}
inline void Config::set_mixnet_rounds(::google::protobuf::int32 value) {
  set_has_mixnet_rounds();
  mixnet_rounds_ = value;
  // @@protoc_insertion_point(field_set:sober.Config.mixnet_rounds)
}

// required int32 num_records_per_block = 5;
inline bool Config::has_num_records_per_block() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Config::set_has_num_records_per_block() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Config::clear_has_num_records_per_block() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Config::clear_num_records_per_block() {
  num_records_per_block_ = 0;
  clear_has_num_records_per_block();
}
inline ::google::protobuf::int32 Config::num_records_per_block() const {
  // @@protoc_insertion_point(field_get:sober.Config.num_records_per_block)
  return num_records_per_block_;
}
inline void Config::set_num_records_per_block(::google::protobuf::int32 value) {
  set_has_num_records_per_block();
  num_records_per_block_ = value;
  // @@protoc_insertion_point(field_set:sober.Config.num_records_per_block)
}

// required string key_path = 6;
inline bool Config::has_key_path() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Config::set_has_key_path() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Config::clear_has_key_path() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Config::clear_key_path() {
  if (key_path_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_path_->clear();
  }
  clear_has_key_path();
}
inline const ::std::string& Config::key_path() const {
  // @@protoc_insertion_point(field_get:sober.Config.key_path)
  return *key_path_;
}
inline void Config::set_key_path(const ::std::string& value) {
  set_has_key_path();
  if (key_path_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_path_ = new ::std::string;
  }
  key_path_->assign(value);
  // @@protoc_insertion_point(field_set:sober.Config.key_path)
}
inline void Config::set_key_path(const char* value) {
  set_has_key_path();
  if (key_path_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_path_ = new ::std::string;
  }
  key_path_->assign(value);
  // @@protoc_insertion_point(field_set_char:sober.Config.key_path)
}
inline void Config::set_key_path(const char* value, size_t size) {
  set_has_key_path();
  if (key_path_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_path_ = new ::std::string;
  }
  key_path_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:sober.Config.key_path)
}
inline ::std::string* Config::mutable_key_path() {
  set_has_key_path();
  if (key_path_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_path_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:sober.Config.key_path)
  return key_path_;
}
inline ::std::string* Config::release_key_path() {
  clear_has_key_path();
  if (key_path_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = key_path_;
    key_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Config::set_allocated_key_path(::std::string* key_path) {
  if (key_path_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete key_path_;
  }
  if (key_path) {
    set_has_key_path();
    key_path_ = key_path;
  } else {
    clear_has_key_path();
    key_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:sober.Config.key_path)
}

// required string tmp_data_path = 7;
inline bool Config::has_tmp_data_path() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Config::set_has_tmp_data_path() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Config::clear_has_tmp_data_path() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Config::clear_tmp_data_path() {
  if (tmp_data_path_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tmp_data_path_->clear();
  }
  clear_has_tmp_data_path();
}
inline const ::std::string& Config::tmp_data_path() const {
  // @@protoc_insertion_point(field_get:sober.Config.tmp_data_path)
  return *tmp_data_path_;
}
inline void Config::set_tmp_data_path(const ::std::string& value) {
  set_has_tmp_data_path();
  if (tmp_data_path_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tmp_data_path_ = new ::std::string;
  }
  tmp_data_path_->assign(value);
  // @@protoc_insertion_point(field_set:sober.Config.tmp_data_path)
}
inline void Config::set_tmp_data_path(const char* value) {
  set_has_tmp_data_path();
  if (tmp_data_path_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tmp_data_path_ = new ::std::string;
  }
  tmp_data_path_->assign(value);
  // @@protoc_insertion_point(field_set_char:sober.Config.tmp_data_path)
}
inline void Config::set_tmp_data_path(const char* value, size_t size) {
  set_has_tmp_data_path();
  if (tmp_data_path_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tmp_data_path_ = new ::std::string;
  }
  tmp_data_path_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:sober.Config.tmp_data_path)
}
inline ::std::string* Config::mutable_tmp_data_path() {
  set_has_tmp_data_path();
  if (tmp_data_path_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tmp_data_path_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:sober.Config.tmp_data_path)
  return tmp_data_path_;
}
inline ::std::string* Config::release_tmp_data_path() {
  clear_has_tmp_data_path();
  if (tmp_data_path_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = tmp_data_path_;
    tmp_data_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Config::set_allocated_tmp_data_path(::std::string* tmp_data_path) {
  if (tmp_data_path_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete tmp_data_path_;
  }
  if (tmp_data_path) {
    set_has_tmp_data_path();
    tmp_data_path_ = tmp_data_path;
  } else {
    clear_has_tmp_data_path();
    tmp_data_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:sober.Config.tmp_data_path)
}

// required int32 nthreads = 8;
inline bool Config::has_nthreads() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Config::set_has_nthreads() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Config::clear_has_nthreads() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Config::clear_nthreads() {
  nthreads_ = 0;
  clear_has_nthreads();
}
inline ::google::protobuf::int32 Config::nthreads() const {
  // @@protoc_insertion_point(field_get:sober.Config.nthreads)
  return nthreads_;
}
inline void Config::set_nthreads(::google::protobuf::int32 value) {
  set_has_nthreads();
  nthreads_ = value;
  // @@protoc_insertion_point(field_set:sober.Config.nthreads)
}

// required int32 merge_factor = 9;
inline bool Config::has_merge_factor() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Config::set_has_merge_factor() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Config::clear_has_merge_factor() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Config::clear_merge_factor() {
  merge_factor_ = 0;
  clear_has_merge_factor();
}
inline ::google::protobuf::int32 Config::merge_factor() const {
  // @@protoc_insertion_point(field_get:sober.Config.merge_factor)
  return merge_factor_;
}
inline void Config::set_merge_factor(::google::protobuf::int32 value) {
  set_has_merge_factor();
  merge_factor_ = value;
  // @@protoc_insertion_point(field_set:sober.Config.merge_factor)
}

// required int32 key_size = 10;
inline bool Config::has_key_size() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Config::set_has_key_size() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Config::clear_has_key_size() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Config::clear_key_size() {
  key_size_ = 0;
  clear_has_key_size();
}
inline ::google::protobuf::int32 Config::key_size() const {
  // @@protoc_insertion_point(field_get:sober.Config.key_size)
  return key_size_;
}
inline void Config::set_key_size(::google::protobuf::int32 value) {
  set_has_key_size();
  key_size_ = value;
  // @@protoc_insertion_point(field_set:sober.Config.key_size)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace sober

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_config_2eproto__INCLUDED
