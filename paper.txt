Secure Data Oblivious Extract-Transform-Load

1. Introduction/Motivation:
	+ Extract-Transform-Load as a service (Pentaho on the cloud). 
	+ Data pulled from multiple sources to a centralized database. 
	+ Challenges: security:
		- computation over encrypted data.  
		- secure computation: reveals nothing about the data during computation, except
			from input + output. 
	+ Systems addressing challenge (1) exist, but stop short at challenge (2). 
		- One reason is because of limited memory -> exposing access pattern. 
 
	+ Examples:
		- sort:  		ordering of individual datasets. 
		- join/grouping: 	dataset with overlapping keys. 
		
2. Problem statement:
	+ Data oblivious computation on untrusted cloud. 
	+ Enable ELT on encrypted data:
		- Hardware-assisted techniques to reduce TCB + retain efficiency. 
	+ Secure computation of ELT:
		- Reveal nothing about the input from the data access pattern. 
		- Formalism:
			IO(f, {e(d1), e(d2), ...}) 
			==
			IO(f, {e(t1), e(t2), ...})
		  when |d1+d2+..| = |t1+t2+..|

	+ SOBER: achieve both properties, for many function f:
		- data validation: 	remove invalid data
		- data deduplication:	remove duplicates
		- sort:			
		- join/merge:		grouping
		- filtering:		tag+remove data
		- kth selection: 	kth largest records. 

	+ SOBER: 
		- reduces to data-oblivious sorting
		- efficient grouping mechanism
	 	- efficient data-oblivious sort: using mix-net 
		- practical system, Xen-based, small overhead for some workloads. 

3. Related work + Paper's positioning:
	+ ORAM: overkill, more overhead. 
	+ Goodrich's data-oblivious computation: sorting, compaction, selection
		- theoretical
		- assuming "private" user memory to carry out computation, i.e. similar to
			download-and-compute approach
		- inefficient. 
		- SOBER is more practical + supports efficient indexing/grouping computation. 
	+ Cipherbase, TrustedDB: 
		- does not address 2nd challenge
		- orthogonal, can be used as next step (datawarehousing). 


4. Implementation/Evaluation:
	+ SOBER sorting vs. Goodrich's. 
		- 2 and >2 rounds of mixing. 

	+ Implement + micro-benchmark other functions:
		- measured as the increased overhead compared to sorting
		- shows that the grouping is more efficient

	+ Instrumenting a real ELT system, benchmark in distributed environment. 	
		- compare sorting performance against baseline of no-encryption. 
