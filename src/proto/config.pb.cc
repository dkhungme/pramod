// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: config.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "config.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace sober {

namespace {

const ::google::protobuf::Descriptor* Config_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Config_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_config_2eproto() {
  protobuf_AddDesc_config_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "config.proto");
  GOOGLE_CHECK(file != NULL);
  Config_descriptor_ = file->message_type(0);
  static const int Config_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Config, data_path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Config, num_records_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Config, record_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Config, mixnet_rounds_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Config, num_records_per_block_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Config, key_path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Config, tmp_data_path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Config, nthreads_),
  };
  Config_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Config_descriptor_,
      Config::default_instance_,
      Config_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Config, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Config, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Config));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_config_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Config_descriptor_, &Config::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_config_2eproto() {
  delete Config::default_instance_;
  delete Config_reflection_;
}

void protobuf_AddDesc_config_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014config.proto\022\005sober\"\266\001\n\006Config\022\021\n\tdata"
    "_path\030\001 \002(\t\022\023\n\013num_records\030\002 \002(\005\022\023\n\013reco"
    "rd_size\030\003 \002(\005\022\025\n\rmixnet_rounds\030\004 \002(\005\022\035\n\025"
    "num_records_per_block\030\005 \002(\005\022\020\n\010key_path\030"
    "\006 \002(\t\022\025\n\rtmp_data_path\030\007 \002(\t\022\020\n\010nthreads"
    "\030\010 \002(\005", 206);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "config.proto", &protobuf_RegisterTypes);
  Config::default_instance_ = new Config();
  Config::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_config_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_config_2eproto {
  StaticDescriptorInitializer_config_2eproto() {
    protobuf_AddDesc_config_2eproto();
  }
} static_descriptor_initializer_config_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Config::kDataPathFieldNumber;
const int Config::kNumRecordsFieldNumber;
const int Config::kRecordSizeFieldNumber;
const int Config::kMixnetRoundsFieldNumber;
const int Config::kNumRecordsPerBlockFieldNumber;
const int Config::kKeyPathFieldNumber;
const int Config::kTmpDataPathFieldNumber;
const int Config::kNthreadsFieldNumber;
#endif  // !_MSC_VER

Config::Config()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Config::InitAsDefaultInstance() {
}

Config::Config(const Config& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Config::SharedCtor() {
  _cached_size_ = 0;
  data_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  num_records_ = 0;
  record_size_ = 0;
  mixnet_rounds_ = 0;
  num_records_per_block_ = 0;
  key_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  tmp_data_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  nthreads_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Config::~Config() {
  SharedDtor();
}

void Config::SharedDtor() {
  if (data_path_ != &::google::protobuf::internal::kEmptyString) {
    delete data_path_;
  }
  if (key_path_ != &::google::protobuf::internal::kEmptyString) {
    delete key_path_;
  }
  if (tmp_data_path_ != &::google::protobuf::internal::kEmptyString) {
    delete tmp_data_path_;
  }
  if (this != default_instance_) {
  }
}

void Config::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Config::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Config_descriptor_;
}

const Config& Config::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_config_2eproto();
  return *default_instance_;
}

Config* Config::default_instance_ = NULL;

Config* Config::New() const {
  return new Config;
}

void Config::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_data_path()) {
      if (data_path_ != &::google::protobuf::internal::kEmptyString) {
        data_path_->clear();
      }
    }
    num_records_ = 0;
    record_size_ = 0;
    mixnet_rounds_ = 0;
    num_records_per_block_ = 0;
    if (has_key_path()) {
      if (key_path_ != &::google::protobuf::internal::kEmptyString) {
        key_path_->clear();
      }
    }
    if (has_tmp_data_path()) {
      if (tmp_data_path_ != &::google::protobuf::internal::kEmptyString) {
        tmp_data_path_->clear();
      }
    }
    nthreads_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Config::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string data_path = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_data_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->data_path().data(), this->data_path().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_num_records;
        break;
      }

      // required int32 num_records = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num_records:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_records_)));
          set_has_num_records();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_record_size;
        break;
      }

      // required int32 record_size = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_record_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &record_size_)));
          set_has_record_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_mixnet_rounds;
        break;
      }

      // required int32 mixnet_rounds = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mixnet_rounds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mixnet_rounds_)));
          set_has_mixnet_rounds();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_num_records_per_block;
        break;
      }

      // required int32 num_records_per_block = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num_records_per_block:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_records_per_block_)));
          set_has_num_records_per_block();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_key_path;
        break;
      }

      // required string key_path = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_key_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->key_path().data(), this->key_path().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_tmp_data_path;
        break;
      }

      // required string tmp_data_path = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tmp_data_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tmp_data_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->tmp_data_path().data(), this->tmp_data_path().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_nthreads;
        break;
      }

      // required int32 nthreads = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nthreads:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nthreads_)));
          set_has_nthreads();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Config::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string data_path = 1;
  if (has_data_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->data_path().data(), this->data_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->data_path(), output);
  }

  // required int32 num_records = 2;
  if (has_num_records()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->num_records(), output);
  }

  // required int32 record_size = 3;
  if (has_record_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->record_size(), output);
  }

  // required int32 mixnet_rounds = 4;
  if (has_mixnet_rounds()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->mixnet_rounds(), output);
  }

  // required int32 num_records_per_block = 5;
  if (has_num_records_per_block()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->num_records_per_block(), output);
  }

  // required string key_path = 6;
  if (has_key_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key_path().data(), this->key_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->key_path(), output);
  }

  // required string tmp_data_path = 7;
  if (has_tmp_data_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tmp_data_path().data(), this->tmp_data_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->tmp_data_path(), output);
  }

  // required int32 nthreads = 8;
  if (has_nthreads()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->nthreads(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Config::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string data_path = 1;
  if (has_data_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->data_path().data(), this->data_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->data_path(), target);
  }

  // required int32 num_records = 2;
  if (has_num_records()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->num_records(), target);
  }

  // required int32 record_size = 3;
  if (has_record_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->record_size(), target);
  }

  // required int32 mixnet_rounds = 4;
  if (has_mixnet_rounds()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->mixnet_rounds(), target);
  }

  // required int32 num_records_per_block = 5;
  if (has_num_records_per_block()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->num_records_per_block(), target);
  }

  // required string key_path = 6;
  if (has_key_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key_path().data(), this->key_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->key_path(), target);
  }

  // required string tmp_data_path = 7;
  if (has_tmp_data_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tmp_data_path().data(), this->tmp_data_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->tmp_data_path(), target);
  }

  // required int32 nthreads = 8;
  if (has_nthreads()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->nthreads(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Config::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string data_path = 1;
    if (has_data_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->data_path());
    }

    // required int32 num_records = 2;
    if (has_num_records()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_records());
    }

    // required int32 record_size = 3;
    if (has_record_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->record_size());
    }

    // required int32 mixnet_rounds = 4;
    if (has_mixnet_rounds()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mixnet_rounds());
    }

    // required int32 num_records_per_block = 5;
    if (has_num_records_per_block()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_records_per_block());
    }

    // required string key_path = 6;
    if (has_key_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key_path());
    }

    // required string tmp_data_path = 7;
    if (has_tmp_data_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tmp_data_path());
    }

    // required int32 nthreads = 8;
    if (has_nthreads()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nthreads());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Config::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Config* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Config*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Config::MergeFrom(const Config& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_data_path()) {
      set_data_path(from.data_path());
    }
    if (from.has_num_records()) {
      set_num_records(from.num_records());
    }
    if (from.has_record_size()) {
      set_record_size(from.record_size());
    }
    if (from.has_mixnet_rounds()) {
      set_mixnet_rounds(from.mixnet_rounds());
    }
    if (from.has_num_records_per_block()) {
      set_num_records_per_block(from.num_records_per_block());
    }
    if (from.has_key_path()) {
      set_key_path(from.key_path());
    }
    if (from.has_tmp_data_path()) {
      set_tmp_data_path(from.tmp_data_path());
    }
    if (from.has_nthreads()) {
      set_nthreads(from.nthreads());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Config::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Config::CopyFrom(const Config& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Config::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000ff) != 0x000000ff) return false;

  return true;
}

void Config::Swap(Config* other) {
  if (other != this) {
    std::swap(data_path_, other->data_path_);
    std::swap(num_records_, other->num_records_);
    std::swap(record_size_, other->record_size_);
    std::swap(mixnet_rounds_, other->mixnet_rounds_);
    std::swap(num_records_per_block_, other->num_records_per_block_);
    std::swap(key_path_, other->key_path_);
    std::swap(tmp_data_path_, other->tmp_data_path_);
    std::swap(nthreads_, other->nthreads_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Config::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Config_descriptor_;
  metadata.reflection = Config_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace sober

// @@protoc_insertion_point(global_scope)
